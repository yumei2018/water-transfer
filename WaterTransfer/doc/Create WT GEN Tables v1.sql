--------------------------------------------------------------------------------
--  DROP ALL TABLES, SEQUENCE AND TRIGGERS
--------------------------------------------------------------------------------
DROP TRIGGER WT_WATER_RIGHTS_PKTRIG;
DROP SEQUENCE WT_WATER_RIGHTS_PKSEQ;
DROP TABLE WT_WATER_RIGHTS;

DROP TRIGGER WT_DOCUMENTS_PKTRIG;
DROP SEQUENCE WT_DOCUMENTS_PKSEQ;
DROP TABLE WT_DOCUMENTS;

DROP TRIGGER WT_MAP_INFO_PKTRIG;
DROP SEQUENCE WT_MAP_INFO_PKSEQ;
DROP TABLE WT_MAP_INFO;

DROP TRIGGER WT_LOCATION_PKTRIG;
DROP SEQUENCE WT_LOCATION_PKSEQ;
DROP TABLE WT_LOCATION;

DROP TRIGGER WT_CONTACT_PHONE_PKTRIG;
DROP SEQUENCE WT_CONTACT_PHONE_PKSEQ;
DROP TABLE WT_CONTACT_PHONE;

DROP TRIGGER WT_CONTACT_PKTRIG;
DROP SEQUENCE WT_CONTACT_PKSEQ;
DROP TABLE WT_CONTACT;

--DROP TRIGGER WT_AGENCY_ADDRESS_PKTRIG;
--DROP SEQUENCE WT_AGENCY_ADDRESS_PKSEQ;
DROP TABLE WT_AGENCY_ADDRESS;

DROP TRIGGER WT_AGENCY_PKTRIG;
DROP SEQUENCE WT_AGENCY_PKSEQ;
DROP TABLE WT_AGENCY;

DROP TRIGGER WT_ADDRESS_PKTRIG;
DROP SEQUENCE WT_ADDRESS_PKSEQ;
DROP TABLE WT_ADDRESS;

DROP TRIGGER WT_STATE_PKTRIG;
DROP SEQUENCE WT_STATE_PKSEQ;
DROP TABLE WT_STATE;

DROP TRIGGER WT_COUNTY_PKTRIG;
DROP SEQUENCE WT_COUNTY_PKSEQ;
DROP TABLE WT_COUNTY;

DROP TRIGGER WT_CITY_PKTRIG;
DROP SEQUENCE WT_CITY_PKSEQ;
DROP TABLE WT_CITY;

--------------------------------------------------------------------------------
--  DDL for Table WT_CITY
--------------------------------------------------------------------------------
CREATE TABLE WT_CITY (
  WT_CITY_ID NUMERIC(16,0) PRIMARY KEY
  ,NAME VARCHAR2(64) NOT NULL ENABLE
  ,SHORT_NAME VARCHAR2(16)
);
/

CREATE SEQUENCE WT_CITY_PKSEQ  
  START WITH 1
  INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER WT_CITY_PKTRIG
BEFORE INSERT
ON WT_CITY
FOR EACH ROW
BEGIN
  IF :NEW.WT_CITY_ID IS NULL THEN
    SELECT WT_CITY_PKSEQ.NEXTVAL
    INTO :NEW.WT_CITY_ID
    FROM DUAL;
  END IF;
END WT_CITY;
/

--------------------------------------------------------------------------------
--  DDL for Table WT_COUNTY
--------------------------------------------------------------------------------
CREATE TABLE WT_COUNTY (
  WT_COUNTY_ID NUMERIC(16,0) PRIMARY KEY
  ,NAME VARCHAR2(64) NOT NULL ENABLE
  ,SHORT_NAME VARCHAR2(16)
);
/

CREATE SEQUENCE WT_COUNTY_PKSEQ  
  START WITH 1
  INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER WT_COUNTY_PKTRIG
BEFORE INSERT
ON WT_COUNTY
FOR EACH ROW
BEGIN
  IF :NEW.WT_COUNTY_ID IS NULL THEN
    SELECT WT_COUNTY_PKSEQ.NEXTVAL
    INTO :NEW.WT_COUNTY_ID
    FROM DUAL;
  END IF;
END WT_COUNTY;
/

--------------------------------------------------------------------------------
--  DDL for Table WT_STATE
--------------------------------------------------------------------------------
CREATE TABLE WT_STATE (
  WT_STATE_ID NUMERIC(16,0) PRIMARY KEY
  ,NAME VARCHAR2(64) NOT NULL ENABLE
  ,SHORT_NAME VARCHAR2(16)
);
/

CREATE SEQUENCE WT_STATE_PKSEQ  
  START WITH 1
  INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER WT_STATE_PKTRIG
BEFORE INSERT
ON WT_STATE
FOR EACH ROW
BEGIN
  IF :NEW.WT_STATE_ID IS NULL THEN
    SELECT WT_STATE_PKSEQ.NEXTVAL
    INTO :NEW.WT_STATE_ID
    FROM DUAL;
  END IF;
END WT_STATE;
/

--------------------------------------------------------------------------------
--  DDL for Table WT_ADDRESS
--------------------------------------------------------------------------------
CREATE TABLE WT_ADDRESS (
  WT_ADDRESS_ID NUMERIC(16,0) PRIMARY KEY
  ,ADDRESS1 VARCHAR2(64) NOT NULL ENABLE
  ,ADDRESS2 VARCHAR2(64) 
  ,WT_CITY_ID REFERENCES WT_CITY(WT_CITY_ID)
  ,WT_COUNTY_ID REFERENCES WT_COUNTY(WT_COUNTY_ID)
  ,WT_STATE_ID REFERENCES WT_STATE(WT_STATE_ID)
  ,ZIPCODE NUMBER(5,0)
  ,ZIP_EXT NUMBER(5,0)
);
/

CREATE SEQUENCE WT_ADDRESS_PKSEQ  
  START WITH 1
  INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER WT_ADDRESS_PKTRIG
BEFORE INSERT
ON WT_ADDRESS
FOR EACH ROW
BEGIN
  IF :NEW.WT_ADDRESS_ID IS NULL THEN
    SELECT WT_ADDRESS_PKSEQ.NEXTVAL
    INTO :NEW.WT_ADDRESS_ID
    FROM DUAL;
  END IF;
END WT_ADDRESS;
/

--------------------------------------------------------------------------------
--  DDL for Table WT_AGENCY
--------------------------------------------------------------------------------
CREATE TABLE WT_AGENCY (
  WT_AGENCY_ID NUMERIC(16,0) PRIMARY KEY
  ,AGENCY_CODE VARCHAR2(16) NOT NULL ENABLE
  ,AGENCY_FULL_NAME VARCHAR2(128) 
  ,AGENCY_ACTIVE_IND NUMBER(1,0) DEFAULT 1 NOT NULL
);
/

CREATE SEQUENCE WT_AGENCY_PKSEQ  
  START WITH 1
  INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER WT_AGENCY_PKTRIG
BEFORE INSERT
ON WT_AGENCY
FOR EACH ROW
BEGIN
  IF :NEW.WT_AGENCY_ID IS NULL THEN
    SELECT WT_AGENCY_PKSEQ.NEXTVAL
    INTO :NEW.WT_AGENCY_ID
    FROM DUAL;
  END IF;
END WT_AGENCY;
/

--------------------------------------------------------------------------------
--  DDL for Table WT_AGENCY_ADDRESS
--------------------------------------------------------------------------------
CREATE TABLE WT_AGENCY_ADDRESS (
  WT_AGENCY_ID REFERENCES WT_AGENCY(WT_AGENCY_ID) ON DELETE CASCADE
  ,WT_ADDRESS_ID REFERENCES WT_ADDRESS(WT_ADDRESS_ID) ON DELETE CASCADE
  ,PRIMARY KEY (WT_AGENCY_ID, WT_ADDRESS_ID)
);
/

--CREATE SEQUENCE WT_AGENCY_ADDRESS_PKSEQ  
--  START WITH 1
--  INCREMENT BY 1;
--/

--CREATE OR REPLACE TRIGGER WT_AGENCY_ADDRESS_PKTRIG
--BEFORE INSERT
--ON WT_AGENCY_ADDRESS
--FOR EACH ROW
--BEGIN
--  IF :NEW.WT_AGENCY_ADDRESS_ID IS NULL THEN
--    SELECT WT_AGENCY_ADDRESS_PKSEQ.NEXTVAL
--    INTO :NEW.WT_AGENCY_ADDRESS_ID
--    FROM DUAL;
--  END IF;
--END WT_AGENCY_ADDRESS;
--/

--------------------------------------------------------------------------------
--  DDL for Table WT_CONTACT
--------------------------------------------------------------------------------
CREATE TABLE WT_CONTACT (
  WT_CONTACT_ID NUMERIC(16,0) PRIMARY KEY
  ,TITLE VARCHAR2(32)
  ,SUFFIX VARCHAR2(8)
  ,LAST_NAME VARCHAR2(32)
  ,MIDDLE_NAME VARCHAR2(32)
  ,FIRST_NAME VARCHAR2(32)
  ,WT_AGENCY_ID REFERENCES WT_AGENCY(WT_AGENCY_ID)
  ,EMAIL VARCHAR2(64)
  ,CREATE_DATE TIMESTAMP(6) DEFAULT SYSTIMESTAMP
);
/

CREATE SEQUENCE WT_CONTACT_PKSEQ  
  START WITH 1
  INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER WT_CONTACT_PKTRIG
BEFORE INSERT
ON WT_CONTACT
FOR EACH ROW
BEGIN
  IF :NEW.WT_CONTACT_ID IS NULL THEN
    SELECT WT_CONTACT_PKSEQ.NEXTVAL
    INTO :NEW.WT_CONTACT_ID
    FROM DUAL;
  END IF;
END WT_CONTACT;
/

--------------------------------------------------------------------------------
--  DDL for Table WT_CONTACT_PHONE
--------------------------------------------------------------------------------
CREATE TABLE WT_CONTACT_PHONE (
  WT_CONTACT_PHONE_ID NUMERIC(16,0) PRIMARY KEY
  ,WT_CONTACT_ID REFERENCES WT_CONTACT(WT_CONTACT_ID)
  ,PHONE_TYPE VARCHAR2(32)
  ,PHONE_NUMBER NUMBER(10,0)
  ,PHONE_EXTENSION NUMBER(10,0)
);
/

CREATE SEQUENCE WT_CONTACT_PHONE_PKSEQ  
  START WITH 1
  INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER WT_CONTACT_PHONE_PKTRIG
BEFORE INSERT
ON WT_CONTACT_PHONE
FOR EACH ROW
BEGIN
  IF :NEW.WT_CONTACT_PHONE_ID IS NULL THEN
    SELECT WT_CONTACT_PHONE_PKSEQ.NEXTVAL
    INTO :NEW.WT_CONTACT_PHONE_ID
    FROM DUAL;
  END IF;
END WT_CONTACT_PHONE;
/

--------------------------------------------------------------------------------
--  DDL for Table WT_LOCATION
--------------------------------------------------------------------------------
CREATE TABLE WT_LOCATION (
  WT_LOCATION_ID NUMERIC(16,0) PRIMARY KEY
  ,LOC_DESC VARCHAR2(128)
  ,TOWNSHIP VARCHAR2(32)
  ,RANGE VARCHAR2(32)
  ,SECTION VARCHAR2(32)
  ,LAT_START NUMBER
  ,LAT_END NUMBER
  ,LONG_START NUMBER
  ,LONG_END NUMBER
  ,RIVER_MILE_START NUMBER
  ,RIVER_MILE_END NUMBER
);
/

CREATE SEQUENCE WT_LOCATION_PKSEQ  
  START WITH 1
  INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER WT_LOCATION_PKTRIG
BEFORE INSERT
ON WT_LOCATION
FOR EACH ROW
BEGIN
  IF :NEW.WT_LOCATION_ID IS NULL THEN
    SELECT WT_LOCATION_PKSEQ.NEXTVAL
    INTO :NEW.WT_LOCATION_ID
    FROM DUAL;
  END IF;
END WT_LOCATION;
/

--------------------------------------------------------------------------------
--  DDL for Table WT_MAP_INFO
--------------------------------------------------------------------------------
CREATE TABLE WT_MAP_INFO (
  WT_MAP_INFO_ID NUMERIC(16,0) PRIMARY KEY
  ,MAP_TYPE VARCHAR2(32)
  ,MAP_DATE DATE
  ,MAP_PATH VARCHAR2(128)
  ,MAP_FILENAME VARCHAR2(32)
  ,MAP_NOTES VARCHAR2(128)
);
/

CREATE SEQUENCE WT_MAP_INFO_PKSEQ  
  START WITH 1
  INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER WT_MAP_INFO_PKTRIG
BEFORE INSERT
ON WT_MAP_INFO
FOR EACH ROW
BEGIN
  IF :NEW.WT_MAP_INFO_ID IS NULL THEN
    SELECT WT_MAP_INFO_PKSEQ.NEXTVAL
    INTO :NEW.WT_MAP_INFO_ID
    FROM DUAL;
  END IF;
END WT_MAP_INFO;
/

--------------------------------------------------------------------------------
--  DDL for Table WT_DOCUMENTS
--------------------------------------------------------------------------------
CREATE TABLE WT_DOCUMENTS (
  WT_DOC_ID NUMERIC(16,0) PRIMARY KEY
  ,DOC_TYPE VARCHAR2(32)
  ,DOC_DATE DATE
  ,DOC_PATH VARCHAR2(128)
  ,DOC_FILENAME VARCHAR2(32)
  ,DOC_NOTES VARCHAR2(128)
);
/

CREATE SEQUENCE WT_DOCUMENTS_PKSEQ  
  START WITH 1
  INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER WT_DOCUMENTS_PKTRIG
BEFORE INSERT
ON WT_DOCUMENTS
FOR EACH ROW
BEGIN
  IF :NEW.WT_DOC_ID IS NULL THEN
    SELECT WT_DOCUMENTS_PKSEQ.NEXTVAL
    INTO :NEW.WT_DOC_ID
    FROM DUAL;
  END IF;
END WT_DOCUMENTS;
/

--------------------------------------------------------------------------------
--  DDL for Table WT_WATER_RIGHTS
--------------------------------------------------------------------------------
CREATE TABLE WT_WATER_RIGHTS (
  WT_WATER_RIGHTS_ID NUMERIC(16,0) PRIMARY KEY
  ,WATER_RIGHTS_DESC VARCHAR2(128)
  ,WT_DOC_ID REFERENCES WT_DOCUMENTS(WT_DOC_ID)
);
/

CREATE SEQUENCE WT_WATER_RIGHTS_PKSEQ  
  START WITH 1
  INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER WT_WATER_RIGHTS_PKTRIG
BEFORE INSERT
ON WT_WATER_RIGHTS
FOR EACH ROW
BEGIN
  IF :NEW.WT_WATER_RIGHTS_ID IS NULL THEN
    SELECT WT_WATER_RIGHTS_PKSEQ.NEXTVAL
    INTO :NEW.WT_WATER_RIGHTS_ID
    FROM DUAL;
  END IF;
END WT_WATER_RIGHTS;
/














